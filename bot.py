from flask import Flask, request
import os
import requests
import time
from binance.client import Client as BinanceClient

app = Flask(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ chat_id –¥–ª—è Telegram –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
if not TELEGRAM_TOKEN or not TELEGRAM_CHAT_ID:
    raise Exception("‚ùå TELEGRAM_TOKEN –∏ TELEGRAM_CHAT_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ –¥–ª—è Binance –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_API_SECRET = os.getenv("BINANCE_API_SECRET")
if not BINANCE_API_KEY or not BINANCE_API_SECRET:
    raise Exception("‚ùå BINANCE_API_KEY –∏ BINANCE_API_SECRET –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Binance API-–∫–ª–∏–µ–Ω—Ç–∞
binance_client = BinanceClient(BINANCE_API_KEY, BINANCE_API_SECRET)
try:
    binance_client.ping()
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance: {e}")

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
def send_telegram_message(text):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": text,
        "parse_mode": "Markdown"
    }
    try:
        response = requests.post(url, data=payload)
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram: {response.status_code} - {response.text}")
        response.raise_for_status()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Å–∏–º–≤–æ–ª—É (–Ω–∞ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ)
def get_position(symbol):
    try:
        info = binance_client.futures_position_information(symbol=symbol)
        # Binance –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∞ —Ä–∞–≤–Ω–∞ 0, –ø–æ—ç—Ç–æ–º—É –±–µ—Ä–µ–º –µ–µ –∏ —Å–º–æ—Ç—Ä–∏–º –ø–æ–∑–∏—Ü–∏—é
        pos = next((p for p in info if p["symbol"] == symbol), None)
        print(f"DEBUG: get_position –¥–ª—è {symbol}: {pos}")
        return pos
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {symbol}: {e}")
        return None

# –ö–æ—Ä–Ω–µ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
@app.route("/")
def index():
    return "üöÄ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

# Webhook –¥–ª—è –ø—Ä–∏—ë–º–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç TradingView –∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ Binance
@app.route("/webhook", methods=["POST"])
def webhook():
    data = request.get_json()
    print("DEBUG: –ü–æ–ª—É—á–µ–Ω JSON:", data)
    if not data or "signal" not in data:
        print("‚ùå –ù–µ—Ç –ø–æ–ª—è 'signal' –≤ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        return {"status": "error", "message": "No signal provided"}, 400

    signal = data["signal"].lower()
    # –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª –∏–∑ TradingView, –Ω–∞–ø—Ä–∏–º–µ—Ä "ETHUSDT.P"
    symbol_received = data.get("symbol", "N/A")
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º: –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å –¥–æ —Ç–æ—á–∫–∏
    symbol_fixed = symbol_received.split('.')[0]

    print(f"üì• –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª: {signal}")
    print(f"üì• –ü–æ–ª—É—á–µ–Ω —Å–∏–º–≤–æ–ª: {symbol_received} -> –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π: {symbol_fixed}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ —ç—Ç–æ–º—É —Å–∏–º–≤–æ–ª—É
    pos = get_position(symbol_fixed)
    if pos is None:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∑–∏—Ü–∏–∏")
    elif abs(float(pos.get("positionAmt", 0))) > 0:
        print(f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞ –ø–æ {symbol_fixed}. –°–∏–≥–Ω–∞–ª {signal} –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.")
        send_telegram_message(f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞ –ø–æ {symbol_fixed}. –°–∏–≥–Ω–∞–ª {signal.upper()} –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.")
        return {"status": "skipped", "message": "Position already open."}

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ—á–æ 1 –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
    try:
        leverage_resp = binance_client.futures_change_leverage(symbol=symbol_fixed, leverage=1)
        print(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–ª–µ—á–æ 1 –¥–ª—è {symbol_fixed}: {leverage_resp}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–µ—á–∞ –¥–ª—è {symbol_fixed}: {e}")
        return {"status": "error", "message": f"Error setting leverage: {e}"}

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ—Ä–æ–Ω—É —Å–¥–µ–ª–∫–∏: –µ—Å–ª–∏ —Å–∏–≥–Ω–∞–ª "long", —Ç–æ BUY, –∏–Ω–∞—á–µ SELL
    side = "BUY" if signal == "long" else "SELL"

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ 0.01
    try:
        order = binance_client.futures_create_order(
            symbol=symbol_fixed,
            side=side,
            type="MARKET",
            quantity=0.01
        )
        print(f"‚úÖ –û—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω: {order}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –¥–ª—è {symbol_fixed}: {e}")
        return {"status": "error", "message": f"Error creating order: {e}"}

    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∑–∏—Ü–∏–∏ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å
    time.sleep(0.5)

    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
    pos = get_position(symbol_fixed)
    if not pos:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å–ª–µ –æ—Ä–¥–µ—Ä–∞")
        return {"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏–∏"}

    try:
        entry_price = float(pos.get("entryPrice", 0))
        used_margin = float(pos.get("initialMargin", 0))
        liq_price = float(pos.get("liquidationPrice", 0))
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–∏: {e}")
        entry_price, used_margin, liq_price = 0, 0, 0

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é –ø–æ –æ—Ä–¥–µ—Ä—É –≤—Ö–æ–¥–∞
    commission = 0.0
    try:
        trades = binance_client.futures_account_trades(symbol=symbol_fixed)
        for trade in reversed(trades):
            if trade.get("orderId") == order.get("orderId"):
                commission = float(trade.get("commission", 0))
                break
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–∏: {e}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    message = (
        f"üöÄ –°–¥–µ–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞!\n"
        f"–°–∏–º–≤–æ–ª: {symbol_fixed}\n"
        f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {signal.upper()}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: 0.01\n"
        f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {entry_price}\n"
        f"–ü–ª–µ—á–æ: 1\n"
        f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –º–∞—Ä–∂–∞: {used_margin}\n"
        f"–¶–µ–Ω–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏: {liq_price}\n"
        f"–ö–æ–º–∏—Å—Å–∏—è –≤—Ö–æ–¥–∞: {commission}"
    )
    send_telegram_message(message)
    print("DEBUG: Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:")
    print(message)

    return {"status": "ok", "signal": signal, "symbol": symbol_fixed}

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
