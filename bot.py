from flask import Flask, request
import os
import requests
import time
import threading
from binance.client import Client as BinanceClient
from binance import ThreadedWebsocketManager
import logging

app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–µ–π (–µ—Å–ª–∏ False ‚Äì —Å–∏–≥–Ω–∞–ª—ã –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è)
trading_enabled = False

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ chat_id –¥–ª—è Telegram –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
if not TELEGRAM_TOKEN or not TELEGRAM_CHAT_ID:
    raise Exception("‚ùå TELEGRAM_TOKEN –∏ TELEGRAM_CHAT_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ –¥–ª—è Binance –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_API_SECRET = os.getenv("BINANCE_API_SECRET")
if not BINANCE_API_KEY or not BINANCE_API_SECRET:
    raise Exception("‚ùå BINANCE_API_KEY –∏ BINANCE_API_SECRET –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Binance API-–∫–ª–∏–µ–Ω—Ç–∞
binance_client = BinanceClient(BINANCE_API_KEY, BINANCE_API_SECRET)
try:
    binance_client.ping()
    logging.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –ø–æ —Å–∏–º–≤–æ–ª–∞–º.
# –°–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è: signal, entry_price, quantity, leverage, used_margin,
# commission_entry, break_even_price, liq_price, tp_perc, sl_perc
positions_entry_data = {}

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è listen_key
listen_key = None

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
def send_telegram_message(text):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": text,
        "parse_mode": "Markdown"
    }
    try:
        response = requests.post(url, data=payload)
        logging.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram: {response.status_code} - {response.text}")
        response.raise_for_status()
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Å–∏–º–≤–æ–ª—É (–Ω–∞ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ)
def get_position(symbol):
    try:
        info = binance_client.futures_position_information(symbol=symbol)
        pos = next((p for p in info if p["symbol"] == symbol), None)
        logging.debug(f"DEBUG: get_position –¥–ª—è {symbol}: {pos}")
        return pos
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {symbol}: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ Futures –±–∞–ª–∞–Ω—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, USDT)
def get_futures_balance():
    try:
        balances = binance_client.futures_account_balance()
        usdt_balance = next((item for item in balances if item["asset"] == "USDT"), None)
        if usdt_balance:
            return float(usdt_balance["balance"])
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
    return None

# --------------------------
# –§—É–Ω–∫—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º reduceOnly=True
def close_all_positions():
    logging.info("–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π.")
    try:
        positions = binance_client.futures_position_information()
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
        return

    closed_symbols = []
    for pos in positions:
        amt = float(pos.get("positionAmt", 0))
        if abs(amt) > 0:
            symbol = pos.get("symbol")
            try:
                order = binance_client.futures_create_order(
                    symbol=symbol,
                    side="SELL" if amt > 0 else "BUY",
                    type="MARKET",
                    quantity=abs(amt),
                    reduceOnly=True
                )
                logging.info(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {symbol} –∑–∞–∫—Ä—ã—Ç–∞: {order}")
                closed_symbols.append(symbol)
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {symbol}: {e}")
    if closed_symbols:
        send_telegram_message(f"üö´ –ó–∞–∫—Ä—ã—Ç—ã –ø–æ–∑–∏—Ü–∏–∏ –ø–æ: {', '.join(closed_symbols)}")
    else:
        send_telegram_message("‚ÑπÔ∏è –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è.")

# --------------------------
# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ (switch_position)
def switch_position(new_signal, symbol, leverage, quantity):
    """
    –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º, –æ—Ç–ª–∏—á–Ω—ã–º –æ—Ç new_signal,
    –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é (–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–µ–π –æ—Ä–¥–µ—Ä–∞ TP/SL), –∂–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è,
    –∏ –∑–∞—Ç–µ–º –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é.
    –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è —Å —Ç–µ–º –∂–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞, —Å–∏–≥–Ω–∞–ª –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.
    """
    current_position = get_position(symbol)
    if current_position:
        current_amt = abs(float(current_position.get("positionAmt", 0)))
        if current_amt > 0:
            current_direction = "long" if float(current_position.get("positionAmt", 0)) > 0 else "short"
            if current_direction != new_signal:
                logging.info(f"–¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è {current_direction.upper()} –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Å–∏–≥–Ω–∞–ª–∞ {new_signal.upper()}, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é.")
                close_all_positions()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –¥–∞–Ω–Ω–æ–º—É —Å–∏–º–≤–æ–ª—É
                time.sleep(2)  # –£–≤–µ–ª–∏—á–µ–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è
            else:
                msg = f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞ —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º {current_direction.upper()}, —Å–∏–≥–Ω–∞–ª {new_signal.upper()} –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è."
                logging.info(msg)
                send_telegram_message(msg)
                return {"status": "skipped", "message": "Position already open."}
    try:
        leverage_resp = binance_client.futures_change_leverage(symbol=symbol, leverage=leverage)
        logging.info(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–ª–µ—á–æ {leverage} –¥–ª—è {symbol}: {leverage_resp}")
    except Exception as e:
        err_msg = f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–µ—á–∞ –¥–ª—è {symbol}: {e}"
        logging.error(err_msg)
        return {"status": "error", "message": err_msg}
    side = "BUY" if new_signal == "long" else "SELL"
    try:
        order = binance_client.futures_create_order(
            symbol=symbol,
            side=side,
            type="MARKET",
            quantity=quantity
        )
        logging.info(f"‚úÖ –û—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω: {order}")
    except Exception as e:
        err_msg = f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –¥–ª—è {symbol}: {e}"
        logging.error(err_msg)
        return {"status": "error", "message": err_msg}
    return {"status": "ok", "message": f"Opened {new_signal.upper()} position on {symbol}."}

# --------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ —á–µ—Ä–µ–∑ Binance User Data Stream
def handle_user_data(msg):
    if msg.get('e') != 'ORDER_TRADE_UPDATE':
        return
    order = msg.get('o', {})
    symbol = order.get('s', '')
    if symbol not in positions_entry_data:
        return

    if order.get('X') == 'FILLED' and order.get('ps', '') == 'BOTH':
        time.sleep(2)  # –≤—Ä–µ–º—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–µ–π–¥–æ–≤
        exit_price = float(order.get('avgPrice', order.get('ap', 0)))
        quantity = float(order.get('q', 0))
        pnl = float(order.get('rp', 0))
        
        commission_exit = 0.0
        try:
            trades = binance_client.futures_account_trades(symbol=symbol)
            if trades:
                last_trade = trades[-1]
                commission_exit = float(last_trade.get('commission', 0))
                logging.info("–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç—Ä–µ–π–¥ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è: " + str(last_trade))
            else:
                logging.info("–¢—Ä–µ–π–¥–æ–≤ –¥–ª—è –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–≥–æ –æ—Ä–¥–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–π–¥–æ–≤ –¥–ª—è –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–¥–µ–ª–∫–∏: {e}")
        
        entry_data = positions_entry_data.pop(symbol, {})
        entry_price = entry_data.get("entry_price", 0)
        leverage = entry_data.get("leverage", 1)
        commission_entry = entry_data.get("commission_entry", 0)
        break_even_price = entry_data.get("break_even_price", 0)
        tp_perc = entry_data.get("tp_perc", 0)
        sl_perc = entry_data.get("sl_perc", 0)
        signal = entry_data.get("signal", "N/A")
        
        total_commission = commission_entry + commission_exit
        net_pnl = pnl - total_commission
        net_break_even = break_even_price + total_commission
        direction = "LONG" if order.get('S', '') == "SELL" else "SHORT"
        
        if tp_perc != 0 and sl_perc != 0:
            if direction == "LONG":
                tp_level = break_even_price * (1 + tp_perc/100)
                sl_level = break_even_price * (1 - sl_perc/100)
            else:
                tp_level = break_even_price * (1 - tp_perc/100)
                sl_level = break_even_price * (1 + sl_perc/100)
        else:
            tp_level = sl_level = None

        closing_method = "MANUAL"
        if order.get("ot") == "TAKE_PROFIT_MARKET":
            closing_method = "TP"
        elif order.get("ot") == "STOP_MARKET":
            closing_method = "SL"
        
        balance = get_futures_balance()
        balance_message = f"\nFutures –±–∞–ª–∞–Ω—Å: USDT {balance}" if balance is not None else ""
        
        result_indicator = "üü©" if net_pnl > 0 else "üü•"
        message = (
            f"{result_indicator} –°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞!\n"
            f"–°–∏–º–≤–æ–ª: {symbol}\n"
            f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n"
            f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {entry_price}\n"
            f"–¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞: {exit_price}\n"
            f"–ü–ª–µ—á–æ: {leverage}\n"
            f"–ö–æ–º–∏—Å—Å–∏—è –≤—Ö–æ–¥–∞: {commission_entry}\n"
            f"–ö–æ–º–∏—Å—Å–∏—è –≤—ã—Ö–æ–¥–∞: {commission_exit}\n"
            f"–°—É–º–º–∞ –∫–æ–º–∏—Å—Å–∏–π: {total_commission}\n"
            f"PnL: {pnl}\n"
            f"–ß–∏—Å—Ç—ã–π PnL: {net_pnl}\n"
            f"–¶–µ–Ω–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏: {break_even_price}\n"
            f"–ß–∏—Å—Ç–∞—è —Ü–µ–Ω–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏: {net_break_even}\n"
            f"–ú–µ—Ç–æ–¥ –∑–∞–∫—Ä—ã—Ç–∏—è: {closing_method}"
            f"{balance_message}"
        )
        send_telegram_message(message)
        logging.info("DEBUG: Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:")
        logging.info(message)
        
        try:
            binance_client.futures_cancel_all_open_orders(symbol=symbol)
            logging.info(f"üßπ –í–∏—Å—è—á–∏–µ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è {symbol} –æ—Ç–º–µ–Ω–µ–Ω—ã.")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –≤–∏—Å—è—á–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è {symbol}: {e}")

# --------------------------
# –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤ (—Ä–∞–∑ –≤ 30 —Å–µ–∫)
def auto_cancel_worker():
    while True:
        time.sleep(30)
        try:
            open_orders = binance_client.futures_get_open_orders()
            if open_orders:
                for order in open_orders:
                    symbol = order.get("symbol")
                    pos = get_position(symbol)
                    if pos is None or abs(float(pos.get("positionAmt", 0))) == 0:
                        binance_client.futures_cancel_all_open_orders(symbol=symbol)
                        logging.info(f"üßπ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞: –û—Ä–¥–µ—Ä—ã –¥–ª—è {symbol} –æ—Ç–º–µ–Ω–µ–Ω—ã, —Ç–∞–∫ –∫–∞–∫ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ—Ç.")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤: {e}")

# --------------------------
# –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ Binance User Data Stream
def start_userdata_stream():
    global listen_key
    twm = ThreadedWebsocketManager(api_key=BINANCE_API_KEY, api_secret=BINANCE_API_SECRET)
    twm.start()
    twm.start_futures_user_socket(callback=handle_user_data)
    logging.info("üì° Binance User Data Stream –∑–∞–ø—É—â–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π.")
    threading.Thread(target=auto_cancel_worker, daemon=True).start()
    
    listen_key = binance_client.futures_stream_get_listen_key()
    
    def keep_alive():
        global listen_key
        while True:
            time.sleep(30 * 60)
            try:
                binance_client.futures_stream_keepalive(listenKey=listen_key)
                logging.info("‚úÖ ListenKey keepalive –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ keepalive: {e}")
                try:
                    listen_key = binance_client.futures_stream_get_listen_key()
                    logging.info("‚úÖ ListenKey –æ–±–Ω–æ–≤–ª–µ–Ω.")
                except Exception as ex:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è listenKey: {ex}")
    threading.Thread(target=keep_alive, daemon=True).start()

# --------------------------
# –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–æ—Å–∞ Telegram –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º (–∫–æ–º–∞–Ω–¥—ã /pause, /resume, /close_orders, /close_orders_pause_trading, /balance, /active_trade)
def poll_telegram_commands():
    global trading_enabled
    offset = None
    while True:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getUpdates"
        params = {}
        if offset:
            params["offset"] = offset
        try:
            response = requests.get(url, params=params, timeout=30)
            data = response.json()
            if data.get("ok") and data.get("result"):
                for update in data["result"]:
                    offset = update["update_id"] + 1
                    message = update.get("message")
                    if not message:
                        continue
                    text = message.get("text", "").strip().lower()
                    if text == "/pause":
                        trading_enabled = False
                        send_telegram_message("üö´ –ë–æ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –°–∏–≥–Ω–∞–ª—ã —Å TradingView –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è.")
                        logging.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /pause. –¢–æ—Ä–≥–æ–≤–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
                    elif text == "/resume":
                        trading_enabled = True
                        send_telegram_message("‚úÖ –ë–æ—Ç –≤–æ–∑–æ–±–Ω–æ–≤–∏–ª —Ä–∞–±–æ—Ç—É. –°–∏–≥–Ω–∞–ª—ã —Å TradingView –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è.")
                        logging.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /resume. –¢–æ—Ä–≥–æ–≤–ª—è –≤–∫–ª—é—á–µ–Ω–∞.")
                    elif text == "/close_orders":
                        close_all_positions()
                    elif text == "/close_orders_pause_trading":
                        close_all_positions()
                        trading_enabled = False
                        send_telegram_message("üö´ –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã –∏ —Ç–æ—Ä–≥–æ–≤–ª—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
                        logging.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /close_orders_pause_trading. –ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã, —Ç–æ—Ä–≥–æ–≤–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
                    elif text == "/balance":
                        balance = get_futures_balance()
                        if balance is not None:
                            send_telegram_message(f"üí∞ –¢–µ–∫—É—â–∏–π Futures –±–∞–ª–∞–Ω—Å: USDT {balance}")
                        else:
                            send_telegram_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å.")
                    elif text == "/active_trade":
                        if len(positions_entry_data) == 0:
                            send_telegram_message("‚ÑπÔ∏è –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π.")
                        else:
                            for sym, info in positions_entry_data.items():
                                active_signal = info.get("signal", "N/A")
                                if info.get("tp_perc", 0) != 0 and info.get("sl_perc", 0) != 0:
                                    if active_signal.lower() == "long":
                                        tp_level = info["break_even_price"] * (1 + info["tp_perc"]/100)
                                        sl_level = info["break_even_price"] * (1 - info["sl_perc"]/100)
                                    else:
                                        tp_level = info["break_even_price"] * (1 - info["tp_perc"]/100)
                                        sl_level = info["break_even_price"] * (1 + info["sl_perc"]/100)
                                    tp_sl_message = f"\nTP: {round(tp_level,2)} ({info['tp_perc']}%)\nSL: {round(sl_level,2)} ({info['sl_perc']}%)"
                                else:
                                    tp_sl_message = ""
                                active_message = (
                                    f"üöÄ –ê–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞:\n"
                                    f"–°–∏–º–≤–æ–ª: {sym}\n"
                                    f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {active_signal.upper()}\n"
                                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {info.get('quantity', 'N/A')}\n"
                                    f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {info.get('entry_price', 'N/A')}\n"
                                    f"–ü–ª–µ—á–æ: {info.get('leverage', 'N/A')}\n"
                                    f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –º–∞—Ä–∂–∞: {info.get('used_margin', 'N/A')}\n"
                                    f"–¶–µ–Ω–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏: {info.get('liq_price', 'N/A')}\n"
                                    f"–ö–æ–º–∏—Å—Å–∏—è –≤—Ö–æ–¥–∞: {info.get('commission_entry', 'N/A')}\n"
                                    f"–¶–µ–Ω–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏: {info.get('break_even_price', 'N/A')}"
                                    f"{tp_sl_message}"
                                )
                                send_telegram_message(active_message)
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–æ—Å–µ Telegram: {e}")
        time.sleep(2)

# --------------------------
# –í–µ–±—Ö—É–∫ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
@app.route("/webhook", methods=["POST"])
def webhook():
    global trading_enabled
    if not trading_enabled:
        logging.info("‚ö†Ô∏è –¢–æ—Ä–≥–æ–≤–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∞. –°–∏–≥–Ω–∞–ª—ã –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è.")
        return {"status": "skipped", "message": "Trading is disabled."}, 200

    try:
        data = request.get_json(force=True)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        return {"status": "error", "message": "JSON parse error"}, 400

    logging.debug(f"DEBUG: –ü–æ–ª—É—á–µ–Ω JSON: {data}")
    if not data or "signal" not in data:
        logging.error("‚ùå –ù–µ—Ç –ø–æ–ª—è 'signal' –≤ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        return {"status": "error", "message": "No signal provided"}, 400

    signal = data["signal"].lower()
    symbol_received = data.get("symbol", "N/A")
    symbol_fixed = symbol_received.split('.')[0]

    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: leverage –∏ quantity
    leverage = int(data.get("leverage", 20))
    quantity = float(data.get("quantity", 0.02))

    logging.info(f"üì• –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª: {signal}")
    logging.info(f"üì• –°–∏–º–≤–æ–ª: {symbol_received} -> {symbol_fixed}")
    logging.info(f"üì• Leverage: {leverage}, Quantity: {quantity}")

    current_pos = get_position(symbol_fixed)
    # –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    if current_pos and abs(float(current_pos.get("positionAmt", 0))) > 0:
        current_direction = "long" if float(current_pos.get("positionAmt", 0)) > 0 else "short"
        if current_direction != signal:
            # –ï—Å–ª–∏ —Å–∏–≥–Ω–∞–ª –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
            result = switch_position(signal, symbol_fixed, leverage, quantity)
            if result["status"] != "ok":
                return result
            # –ü–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞ (–Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞)
            return result
        else:
            msg = f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞ —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º {current_direction.upper()}. –°–∏–≥–Ω–∞–ª {signal.upper()} –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è."
            logging.info(msg)
            send_telegram_message(msg)
            return {"status": "skipped", "message": "Position already open."}
    else:
        # –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ—Ç, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—É—é —á–µ—Ä–µ–∑ switch_position
        result = switch_position(signal, symbol_fixed, leverage, quantity)
        if result["status"] != "ok":
            return result
        # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è TP/SL

    ticker = binance_client.futures_symbol_ticker(symbol=symbol_fixed)
    last_price = float(ticker["price"])

    exchange_info = binance_client.futures_exchange_info()
    symbol_info = next((s for s in exchange_info["symbols"] if s["symbol"] == symbol_fixed), None)
    if symbol_info:
        min_notional = None
        for f in symbol_info["filters"]:
            if f.get("filterType") == "MIN_NOTIONAL" and "minNotional" in f:
                min_notional = float(f["minNotional"])
                break
        if min_notional is None:
            min_notional = 20.0  # –µ—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º 20 USDT –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        quantity_precision = int(symbol_info.get("quantityPrecision", 3))
        min_qty_required = round(min_notional / last_price, quantity_precision)
        if quantity < min_qty_required:
            logging.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ {quantity} —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ, –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ç—Ä–µ–±—É–µ–º–æ–µ: {min_qty_required:.6f}. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")
            quantity = min_qty_required

    side = "BUY" if signal == "long" else "SELL"
    quantity = round(quantity, 3)

    try:
        order = binance_client.futures_create_order(
            symbol=symbol_fixed,
            side=side,
            type="MARKET",
            quantity=quantity
        )
        logging.info(f"‚úÖ –û—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω: {order}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –¥–ª—è {symbol_fixed}: {e}")
        return {"status": "error", "message": f"Error creating order: {e}"}

    time.sleep(0.5)
    pos = get_position(symbol_fixed)
    if not pos:
        logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å–ª–µ –æ—Ä–¥–µ—Ä–∞")
        return {"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏–∏"}

    try:
        entry_price = float(pos.get("entryPrice", 0))
        used_margin = float(pos.get("initialMargin", 0))
        liq_price = float(pos.get("liquidationPrice", 0))
        break_even_price = float(pos.get("breakEvenPrice", 0))
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–∏: {e}")
        entry_price, used_margin, liq_price, break_even_price = 0, 0, 0, 0

    commission_entry = 0.0
    try:
        trades = binance_client.futures_account_trades(symbol=symbol_fixed)
        for trade in reversed(trades):
            if trade.get("orderId") == order.get("orderId"):
                commission_entry = float(trade.get("commission", 0))
                break
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–∏: {e}")

    tp_perc = float(data.get("tp_perc", 0))
    sl_perc = float(data.get("sl_perc", 0))
    tp_sl_message = ""
    if tp_perc != 0 and sl_perc != 0:
        if signal == "long":
            tp_level = break_even_price * (1 + tp_perc/100)
            sl_level = break_even_price * (1 - sl_perc/100)
        else:
            tp_level = break_even_price * (1 - tp_perc/100)
            sl_level = break_even_price * (1 + sl_perc/100)
        try:
            tp_order = binance_client.futures_create_order(
                symbol=symbol_fixed,
                side="SELL" if signal=="long" else "BUY",
                type="TAKE_PROFIT_MARKET",
                stopPrice=round(tp_level, 2),
                closePosition=True,
                timeInForce="GTC"
            )
            logging.info(f"‚úÖ TP –æ—Ä–¥–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è {symbol_fixed}: {tp_order}")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ TP –æ—Ä–¥–µ—Ä–∞ –¥–ª—è {symbol_fixed}: {e}")
        try:
            sl_order = binance_client.futures_create_order(
                symbol=symbol_fixed,
                side="SELL" if signal=="long" else "BUY",
                type="STOP_MARKET",
                stopPrice=round(sl_level, 2),
                closePosition=True,
                timeInForce="GTC"
            )
            logging.info(f"‚úÖ SL –æ—Ä–¥–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è {symbol_fixed}: {sl_order}")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ SL –æ—Ä–¥–µ—Ä–∞ –¥–ª—è {symbol_fixed}: {e}")
        tp_sl_message = f"\nTP: {round(tp_level,2)} ({tp_perc}%)\nSL: {round(sl_level,2)} ({sl_perc}%)"

    open_message = (
        f"üöÄ –°–¥–µ–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞!\n"
        f"–°–∏–º–≤–æ–ª: {symbol_fixed}\n"
        f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {signal.upper()}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n"
        f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {entry_price}\n"
        f"–ü–ª–µ—á–æ: {leverage}\n"
        f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –º–∞—Ä–∂–∞: {used_margin}\n"
        f"–¶–µ–Ω–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏: {liq_price}\n"
        f"–ö–æ–º–∏—Å—Å–∏—è –≤—Ö–æ–¥–∞: {commission_entry}\n"
        f"–¶–µ–Ω–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏: {break_even_price}"
        f"{tp_sl_message}"
    )
    send_telegram_message(open_message)
    logging.info("DEBUG: Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:")
    logging.info(open_message)

    positions_entry_data[symbol_fixed] = {
        "signal": signal,
        "entry_price": entry_price,
        "quantity": quantity,
        "leverage": leverage,
        "commission_entry": commission_entry,
        "break_even_price": break_even_price,
        "used_margin": used_margin,
        "liq_price": liq_price,
        "tp_perc": tp_perc,
        "sl_perc": sl_perc
    }

    return {"status": "ok", "signal": signal, "symbol": symbol_fixed}

if __name__ == "__main__":
    threading.Thread(target=poll_telegram_commands, daemon=True).start()
    threading.Thread(target=start_userdata_stream, daemon=True).start()
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
