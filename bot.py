from flask import Flask, request
import os
import requests
import time
import threading
from binance.client import Client as BinanceClient
from binance import ThreadedWebsocketManager
import logging

app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–µ–π (–µ—Å–ª–∏ False ‚Äì —Å–∏–≥–Ω–∞–ª—ã –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è)
trading_enabled = False

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ chat_id –¥–ª—è Telegram –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
if not TELEGRAM_TOKEN or not TELEGRAM_CHAT_ID:
    raise Exception("‚ùå TELEGRAM_TOKEN –∏ TELEGRAM_CHAT_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ –¥–ª—è Binance –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_API_SECRET = os.getenv("BINANCE_API_SECRET")
if not BINANCE_API_KEY or not BINANCE_API_SECRET:
    raise Exception("‚ùå BINANCE_API_KEY –∏ BINANCE_API_SECRET –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Binance API-–∫–ª–∏–µ–Ω—Ç–∞
binance_client = BinanceClient(BINANCE_API_KEY, BINANCE_API_SECRET)
try:
    binance_client.ping()
    logging.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –ø–æ —Å–∏–º–≤–æ–ª–∞–º.
# –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ: entry_price, quantity, leverage, commission_entry, break_even_price
positions_entry_data = {}

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
def send_telegram_message(text):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": text,
        "parse_mode": "Markdown"
    }
    try:
        response = requests.post(url, data=payload)
        logging.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram: {response.status_code} - {response.text}")
        response.raise_for_status()
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Å–∏–º–≤–æ–ª—É (–Ω–∞ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ)
def get_position(symbol):
    try:
        info = binance_client.futures_position_information(symbol=symbol)
        pos = next((p for p in info if p["symbol"] == symbol), None)
        logging.debug(f"DEBUG: get_position –¥–ª—è {symbol}: {pos}")
        return pos
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {symbol}: {e}")
        return None

# --------------------------
# –§—É–Ω–∫—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º reduceOnly=True
def close_all_positions():
    logging.info("–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π.")
    try:
        positions = binance_client.futures_position_information()
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
        return

    closed_symbols = []
    for pos in positions:
        amt = float(pos.get("positionAmt", 0))
        if abs(amt) > 0:
            symbol = pos.get("symbol")
            try:
                order = binance_client.futures_create_order(
                    symbol=symbol,
                    side="SELL" if amt > 0 else "BUY",
                    type="MARKET",
                    quantity=abs(amt),
                    reduceOnly=True
                )
                logging.info(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {symbol} –∑–∞–∫—Ä—ã—Ç–∞: {order}")
                closed_symbols.append(symbol)
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {symbol}: {e}")
    if closed_symbols:
        send_telegram_message(f"üö´ –ó–∞–∫—Ä—ã—Ç—ã –ø–æ–∑–∏—Ü–∏–∏ –ø–æ: {', '.join(closed_symbols)}")
    else:
        send_telegram_message("‚ÑπÔ∏è –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è.")

# --------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ —á–µ—Ä–µ–∑ Binance User Data Stream
def handle_user_data(msg):
    if msg.get('e') != 'ORDER_TRADE_UPDATE':
        return
    order = msg.get('o', {})
    logging.info("Order object: " + str(order))
    symbol = order.get('s', '')
    if symbol not in positions_entry_data:
        return
    if order.get('X') == 'FILLED' and order.get('ps', '') == 'BOTH':
        exit_price = float(order.get('avgPrice', order.get('ap', 0)))
        quantity = float(order.get('q', 0))
        pnl = float(order.get('rp', 0))
        commission_exit = float(order.get('commission', 0))
        entry_data = positions_entry_data.pop(symbol, {})
        entry_price = entry_data.get("entry_price", 0)
        leverage = entry_data.get("leverage", 1)
        commission_entry = entry_data.get("commission_entry", 0)
        break_even_price = entry_data.get("break_even_price", 0)
        total_commission = commission_entry + commission_exit
        net_pnl = pnl - total_commission
        net_break_even = break_even_price + total_commission
        direction = "LONG" if order.get('S', '') == "SELL" else "SHORT"
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ —Ç–∏–ø—É –æ—Ä–¥–µ—Ä–∞
        closing_method = "MANUAL"
        if order.get("type") == "TAKE_PROFIT_MARKET":
            closing_method = "TP"
        elif order.get("type") == "STOP_MARKET":
            closing_method = "SL"
        result_indicator = "üü©" if net_pnl > 0 else "üü•"
        message = (
            f"{result_indicator} –°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞!\n"
            f"–°–∏–º–≤–æ–ª: {symbol}\n"
            f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n"
            f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {entry_price}\n"
            f"–¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞: {exit_price}\n"
            f"–ü–ª–µ—á–æ: {leverage}\n"
            f"–°—É–º–º–∞ –∫–æ–º–∏—Å—Å–∏–π: {total_commission}\n"
            f"PnL: {pnl}\n"
            f"–ß–∏—Å—Ç—ã–π PnL: {net_pnl}\n"
            f"–¶–µ–Ω–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏: {break_even_price}\n"
            f"–ß–∏—Å—Ç–∞—è —Ü–µ–Ω–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏: {net_break_even}\n"
            f"–ú–µ—Ç–æ–¥ –∑–∞–∫—Ä—ã—Ç–∏—è: {closing_method}"
        )
        send_telegram_message(message)
        logging.info("DEBUG: Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:")
        logging.info(message)
        # –û—Ç–º–µ–Ω—è–µ–º –≤–∏—Å—è—á–∏–µ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞, —á—Ç–æ–±—ã –Ω–µ –æ—Å—Ç–∞–≤–∞–ª–∏—Å—å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
        try:
            binance_client.futures_cancel_all_open_orders(symbol=symbol)
            logging.info(f"üßπ –í–∏—Å—è—á–∏–µ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è {symbol} –æ—Ç–º–µ–Ω–µ–Ω—ã.")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –≤–∏—Å—è—á–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è {symbol}: {e}")

# --------------------------
# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–∑ –≤ 30 —Å–µ–∫—É–Ω–¥ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ –æ—Ç–º–µ–Ω—è–µ—Ç –æ—Ä–¥–µ—Ä–∞, –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
def auto_cancel_worker():
    while True:
        time.sleep(30)
        try:
            open_orders = binance_client.futures_get_open_orders()
            if open_orders:
                # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–∑–∏—Ü–∏—è –ø–æ –¥–∞–Ω–Ω–æ–º—É —Å–∏–º–≤–æ–ª—É
                for order in open_orders:
                    symbol = order.get("symbol")
                    pos = get_position(symbol)
                    if pos is None or abs(float(pos.get("positionAmt", 0))) == 0:
                        binance_client.futures_cancel_all_open_orders(symbol=symbol)
                        logging.info(f"üßπ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞: –û—Ä–¥–µ—Ä—ã –¥–ª—è {symbol} –æ—Ç–º–µ–Ω–µ–Ω—ã, —Ç–∞–∫ –∫–∞–∫ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ—Ç.")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤: {e}")

# --------------------------
# –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ Binance User Data Stream
def start_userdata_stream():
    twm = ThreadedWebsocketManager(api_key=BINANCE_API_KEY, api_secret=BINANCE_API_SECRET)
    twm.start()
    twm.start_futures_user_socket(callback=handle_user_data)
    logging.info("üì° Binance User Data Stream –∑–∞–ø—É—â–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π.")
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫—É –æ—Ä–¥–µ—Ä–æ–≤
    threading.Thread(target=auto_cancel_worker, daemon=True).start()
    # –ü–æ–ª—É—á–∞–µ–º listenKey –≤—Ä—É—á–Ωo –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ WebSocket
    listen_key = binance_client.futures_stream_get_listen_key()
    def keep_alive():
        global listen_key
        while True:
            time.sleep(30 * 60)
            try:
                binance_client.futures_stream_keepalive(listenKey=listen_key)
                logging.info("‚úÖ ListenKey keepalive –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ keepalive: {e}")
                try:
                    listen_key = binance_client.futures_stream_get_listen_key()
                    logging.info("‚úÖ ListenKey –æ–±–Ω–æ–≤–ª–µ–Ω.")
                except Exception as ex:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è listenKey: {ex}")
    threading.Thread(target=keep_alive, daemon=True).start()

# --------------------------
# –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–æ—Å–∞ Telegram –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º (–∫–æ–º–∞–Ω–¥—ã /pause, /resume, /close_orders, /close_orders_pause_trading)
def poll_telegram_commands():
    global trading_enabled
    offset = None
    while True:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getUpdates"
        params = {}
        if offset:
            params["offset"] = offset
        try:
            response = requests.get(url, params=params, timeout=30)
            data = response.json()
            if data.get("ok") and data.get("result"):
                for update in data["result"]:
                    offset = update["update_id"] + 1
                    message = update.get("message")
                    if not message:
                        continue
                    text = message.get("text", "").strip().lower()
                    if text == "/pause":
                        trading_enabled = False
                        send_telegram_message("üö´ –ë–æ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –°–∏–≥–Ω–∞–ª—ã —Å TradingView –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è.")
                        logging.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /pause. –¢–æ—Ä–≥–æ–≤–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
                    elif text == "/resume":
                        trading_enabled = True
                        send_telegram_message("‚úÖ –ë–æ—Ç –≤–æ–∑–æ–±–Ω–æ–≤–∏–ª —Ä–∞–±–æ—Ç—É. –°–∏–≥–Ω–∞–ª—ã —Å TradingView –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è.")
                        logging.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /resume. –¢–æ—Ä–≥–æ–≤–ª—è –≤–∫–ª—é—á–µ–Ω–∞.")
                    elif text == "/close_orders":
                        close_all_positions()
                    elif text == "/close_orders_pause_trading":
                        close_all_positions()
                        trading_enabled = False
                        send_telegram_message("üö´ –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã –∏ —Ç–æ—Ä–≥–æ–≤–ª—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
                        logging.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /close_orders_pause_trading. –ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã, —Ç–æ—Ä–≥–æ–≤–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–æ—Å–µ Telegram: {e}")
        time.sleep(2)

# --------------------------
# –í–µ–±—Ö—É–∫ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
@app.route("/webhook", methods=["POST"])
def webhook():
    global trading_enabled
    if not trading_enabled:
        logging.info("‚ö†Ô∏è –¢–æ—Ä–≥–æ–≤–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∞. –°–∏–≥–Ω–∞–ª—ã –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è.")
        return {"status": "skipped", "message": "Trading is disabled."}, 200

    data = request.get_json()
    logging.debug(f"DEBUG: –ü–æ–ª—É—á–µ–Ω JSON: {data}")
    if not data or "signal" not in data:
        logging.error("‚ùå –ù–µ—Ç –ø–æ–ª—è 'signal' –≤ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        return {"status": "error", "message": "No signal provided"}, 400

    signal = data["signal"].lower()
    symbol_received = data.get("symbol", "N/A")
    symbol_fixed = symbol_received.split('.')[0]

    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: leverage –∏ quantity (–µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    leverage = int(data.get("leverage", 20))
    quantity = float(data.get("quantity", 0.011))

    logging.info(f"üì• –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª: {signal}")
    logging.info(f"üì• –°–∏–º–≤–æ–ª: {symbol_received} -> {symbol_fixed}")
    logging.info(f"üì• Leverage: {leverage}, Quantity: {quantity}")

    pos = get_position(symbol_fixed)
    if pos and abs(float(pos.get("positionAmt", 0))) > 0:
        logging.info(f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞ –ø–æ {symbol_fixed}. –°–∏–≥–Ω–∞–ª {signal.upper()} –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.")
        send_telegram_message(f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞ –ø–æ {symbol_fixed}. –°–∏–≥–Ω–∞–ª {signal.upper()} –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.")
        return {"status": "skipped", "message": "Position already open."}

    try:
        leverage_resp = binance_client.futures_change_leverage(symbol=symbol_fixed, leverage=leverage)
        logging.info(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–ª–µ—á–æ {leverage} –¥–ª—è {symbol_fixed}: {leverage_resp}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–µ—á–∞ –¥–ª—è {symbol_fixed}: {e}")
        return {"status": "error", "message": f"Error setting leverage: {e}"}

    ticker = binance_client.futures_symbol_ticker(symbol=symbol_fixed)
    last_price = float(ticker["price"])
    min_notional = 20.0
    min_qty_required = min_notional / last_price
    if quantity < min_qty_required:
        logging.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ {quantity} —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ, –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ç—Ä–µ–±—É–µ–º–æ–µ: {min_qty_required:.6f}. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")
        quantity = min_qty_required

    side = "BUY" if signal == "long" else "SELL"

    try:
        order = binance_client.futures_create_order(
            symbol=symbol_fixed,
            side=side,
            type="MARKET",
            quantity=quantity
        )
        logging.info(f"‚úÖ –û—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω: {order}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –¥–ª—è {symbol_fixed}: {e}")
        return {"status": "error", "message": f"Error creating order: {e}"}

    time.sleep(0.5)
    pos = get_position(symbol_fixed)
    if not pos:
        logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å–ª–µ –æ—Ä–¥–µ—Ä–∞")
        return {"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏–∏"}

    try:
        entry_price = float(pos.get("entryPrice", 0))
        used_margin = float(pos.get("initialMargin", 0))
        liq_price = float(pos.get("liquidationPrice", 0))
        break_even_price = float(pos.get("breakEvenPrice", 0))
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–∏: {e}")
        entry_price, used_margin, liq_price, break_even_price = 0, 0, 0, 0

    commission_entry = 0.0
    try:
        trades = binance_client.futures_account_trades(symbol=symbol_fixed)
        for trade in reversed(trades):
            if trade.get("orderId") == order.get("orderId"):
                commission_entry = float(trade.get("commission", 0))
                break
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–∏: {e}")

    # –ü–æ–ª—É—á–∞–µ–º TP/SL –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    tp_perc = float(data.get("tp_perc", 0))
    sl_perc = float(data.get("sl_perc", 0))
    tp_sl_message = ""
    if tp_perc != 0 and sl_perc != 0:
        if signal == "long":
            tp_level = break_even_price * (1 + tp_perc/100)
            sl_level = break_even_price * (1 - sl_perc/100)
        else:
            tp_level = break_even_price * (1 - tp_perc/100)
            sl_level = break_even_price * (1 + sl_perc/100)
        try:
            tp_order = binance_client.futures_create_order(
                symbol=symbol_fixed,
                side="SELL" if signal=="long" else "BUY",
                type="TAKE_PROFIT_MARKET",
                stopPrice=round(tp_level, 2),
                closePosition=True,
                timeInForce="GTC"
            )
            logging.info(f"‚úÖ TP –æ—Ä–¥–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è {symbol_fixed}: {tp_order}")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ TP –æ—Ä–¥–µ—Ä–∞ –¥–ª—è {symbol_fixed}: {e}")
        try:
            sl_order = binance_client.futures_create_order(
                symbol=symbol_fixed,
                side="SELL" if signal=="long" else "BUY",
                type="STOP_MARKET",
                stopPrice=round(sl_level, 2),
                closePosition=True,
                timeInForce="GTC"
            )
            logging.info(f"‚úÖ SL –æ—Ä–¥–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è {symbol_fixed}: {sl_order}")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ SL –æ—Ä–¥–µ—Ä–∞ –¥–ª—è {symbol_fixed}: {e}")
        tp_sl_message = f"\nTP: {round(tp_level,2)} ({tp_perc}%)\nSL: {round(sl_level,2)} ({sl_perc}%)"

    open_message = (
        f"üöÄ –°–¥–µ–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞!\n"
        f"–°–∏–º–≤–æ–ª: {symbol_fixed}\n"
        f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {signal.upper()}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n"
        f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {entry_price}\n"
        f"–ü–ª–µ—á–æ: {leverage}\n"
        f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –º–∞—Ä–∂–∞: {used_margin}\n"
        f"–¶–µ–Ω–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏: {liq_price}\n"
        f"–ö–æ–º–∏—Å—Å–∏—è –≤—Ö–æ–¥–∞: {commission_entry}\n"
        f"–¶–µ–Ω–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏: {break_even_price}"
        f"{tp_sl_message}"
    )
    send_telegram_message(open_message)
    logging.info("DEBUG: Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:")
    logging.info(open_message)

    positions_entry_data[symbol_fixed] = {
        "entry_price": entry_price,
        "quantity": quantity,
        "leverage": leverage,
        "commission_entry": commission_entry,
        "break_even_price": break_even_price
    }

    return {"status": "ok", "signal": signal, "symbol": symbol_fixed}

if __name__ == "__main__":
    threading.Thread(target=poll_telegram_commands, daemon=True).start()
    threading.Thread(target=start_userdata_stream, daemon=True).start()
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
