from flask import Flask, request
import os
import requests
from binance.client import Client as BinanceClient

app = Flask(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ chat_id –¥–ª—è Telegram –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
if not TELEGRAM_TOKEN or not TELEGRAM_CHAT_ID:
    raise Exception("‚ùå TELEGRAM_TOKEN –∏ TELEGRAM_CHAT_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ –¥–ª—è Binance –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_API_SECRET = os.getenv("BINANCE_API_SECRET")
if not BINANCE_API_KEY or not BINANCE_API_SECRET:
    raise Exception("‚ùå BINANCE_API_KEY –∏ BINANCE_API_SECRET –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Binance API-–∫–ª–∏–µ–Ω—Ç
binance_client = BinanceClient(BINANCE_API_KEY, BINANCE_API_SECRET)
try:
    binance_client.ping()
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance: {e}")

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
def send_telegram_message(text):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": text,
        "parse_mode": "Markdown"
    }
    try:
        response = requests.post(url, data=payload)
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram: {response.status_code} - {response.text}")
        response.raise_for_status()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

# –ö–æ—Ä–Ω–µ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
@app.route("/")
def index():
    return "üöÄ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

# Webhook –¥–ª—è –ø—Ä–∏—ë–º–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç TradingView
@app.route("/webhook", methods=["POST"])
def webhook():
    data = request.get_json()
    if not data or "signal" not in data:
        return {"status": "error", "message": "No signal provided"}, 400

    signal = data["signal"]
    # –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª –∏–∑ TradingView (–Ω–∞–ø—Ä–∏–º–µ—Ä, "ETHUSDT.P")
    symbol_received = data.get("symbol", "N/A")
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç Binance: –æ—Å—Ç–∞–≤–ª—è–µ–º —á–∞—Å—Ç—å –¥–æ –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏
    symbol_fixed = symbol_received.split('.')[0]

    print(f"üì• –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª: {signal}")
    print(f"üì• –ü–æ–ª—É—á–µ–Ω —Å–∏–º–≤–æ–ª: {symbol_received} -> –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π: {symbol_fixed}")

    # –ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Binance
    try:
        futures_balance = binance_client.futures_account_balance()
        usdt_balance = None
        for asset in futures_balance:
            if asset.get("asset") == "USDT":
                usdt_balance = asset.get("balance")
                break
        print(f"üìä Futures –±–∞–ª–∞–Ω—Å: USDT {usdt_balance}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
        usdt_balance = "–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å"

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏ –Ω–∞ Binance –ø–æ symbol_fixed –∏ signal
    # –ù–∞–ø—Ä–∏–º–µ—Ä: open_trade(symbol_fixed, signal)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞, –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º –∏ –±–∞–ª–∞–Ω—Å–æ–º
    send_telegram_message(
        f"üì° –≠–π! –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª: *{signal.upper()}*\n–°–∏–º–≤–æ–ª: *{symbol_fixed}*\nFutures –±–∞–ª–∞–Ω—Å: USDT {usdt_balance}"
    )

    return {"status": "ok", "signal": signal, "symbol": symbol_fixed}

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
