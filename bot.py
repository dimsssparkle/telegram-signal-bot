from flask import Flask, request
import os
import requests
import time
import threading
from binance.client import Client as BinanceClient
from binance import ThreadedWebsocketManager
import logging

app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ chat_id –¥–ª—è Telegram –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
if not TELEGRAM_TOKEN or not TELEGRAM_CHAT_ID:
    raise Exception("‚ùå TELEGRAM_TOKEN –∏ TELEGRAM_CHAT_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ –¥–ª—è Binance –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_API_SECRET = os.getenv("BINANCE_API_SECRET")
if not BINANCE_API_KEY or not BINANCE_API_SECRET:
    raise Exception("‚ùå BINANCE_API_KEY –∏ BINANCE_API_SECRET –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Binance API-–∫–ª–∏–µ–Ω—Ç–∞
binance_client = BinanceClient(BINANCE_API_KEY, BINANCE_API_SECRET)
try:
    binance_client.ping()
    logging.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –ø–æ —Å–∏–º–≤–æ–ª–∞–º
# –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ —Ö—Ä–∞–Ω–∏–º: entry_price, quantity, leverage, commission_entry, break_even_price
positions_entry_data = {}

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
def send_telegram_message(text):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": text,
        "parse_mode": "Markdown"
    }
    try:
        response = requests.post(url, data=payload)
        logging.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram: {response.status_code} - {response.text}")
        response.raise_for_status()
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Å–∏–º–≤–æ–ª—É (–Ω–∞ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ)
def get_position(symbol):
    try:
        info = binance_client.futures_position_information(symbol=symbol)
        pos = next((p for p in info if p["symbol"] == symbol), None)
        logging.debug(f"DEBUG: get_position –¥–ª—è {symbol}: {pos}")
        return pos
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {symbol}: {e}")
        return None

# --------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ —á–µ—Ä–µ–∑ Binance User Data Stream
def handle_user_data(msg):
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏—è ORDER_TRADE_UPDATE
    if msg.get('e') != 'ORDER_TRADE_UPDATE':
        return
    order = msg.get('o', {})
    symbol = order.get('s', '')
    # –ï—Å–ª–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏, –≤—ã—Ö–æ–¥–∏–º
    if symbol not in positions_entry_data:
        return
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏:
    # –û–±—ã—á–Ω–æ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å "FILLED" –∏ ps == "BOTH"
    if order.get('X') == 'FILLED' and order.get('ps', '') == 'BOTH':
        # –¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞: –∏—Å–ø–æ–ª—å–∑—É–µ–º avgPrice –∏–ª–∏ fallback ap
        exit_price = float(order.get('avgPrice', order.get('ap', 0)))
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
        quantity = float(order.get('q', 0))
        # Realized PnL (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        pnl = float(order.get('rp', 0))
        # –ö–æ–º–∏—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è
        commission_exit = float(order.get('commission', 0))
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏
        entry_data = positions_entry_data.pop(symbol, {})
        entry_price = entry_data.get("entry_price", 0)
        leverage = entry_data.get("leverage", 1)
        commission_entry = entry_data.get("commission_entry", 0)
        break_even_price = entry_data.get("break_even_price", 0)
        total_commission = commission_entry + commission_exit
        net_pnl = pnl - total_commission
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∏—Å—Ç—É—é —Ü–µ–Ω—É –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏ (break-even + —Å—É–º–º–∞—Ä–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏)
        net_break_even = break_even_price + total_commission
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è: –µ—Å–ª–∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π –æ—Ä–¥–µ—Ä SELL, –∑–Ω–∞—á–∏—Ç –ø–æ–∑–∏—Ü–∏—è LONG, –∏–Ω–∞—á–µ SHORT
        direction = "LONG" if order.get('S', '') == "SELL" else "SHORT"
        # –†–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–¥–µ–ª–∫–∏: –∑–µ–ª–µ–Ω—ã–π, –µ—Å–ª–∏ —á–∏—Å—Ç—ã–π PnL –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π, –∏–Ω–∞—á–µ –∫—Ä–∞—Å–Ω—ã–π
        result_indicator = "üü©" if net_pnl > 0 else "üü•"
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f"{result_indicator} –°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞!\n"
            f"–°–∏–º–≤–æ–ª: {symbol}\n"
            f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n"
            f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {entry_price}\n"
            f"–¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞: {exit_price}\n"
            f"–ü–ª–µ—á–æ: {leverage}\n"
            f"–°—É–º–º–∞ –∫–æ–º–∏—Å—Å–∏–π: {total_commission}\n"
            f"PnL: {pnl}\n"
            f"–ß–∏—Å—Ç—ã–π PnL: {net_pnl}\n"
            f"–¶–µ–Ω–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏: {break_even_price}\n"
            f"–ß–∏—Å—Ç–∞—è —Ü–µ–Ω–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏: {net_break_even}\n"
            f"–ú–µ—Ç–æ–¥ –∑–∞–∫—Ä—ã—Ç–∏—è: MANUAL"
        )
        send_telegram_message(message)
        logging.info("DEBUG: Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:")
        logging.info(message)

# –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ Binance User Data Stream
def start_userdata_stream():
    twm = ThreadedWebsocketManager(api_key=BINANCE_API_KEY, api_secret=BINANCE_API_SECRET)
    twm.start()
    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Ñ—å—é—á–µ—Ä—Å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–æ—Ç–æ–∫
    twm.start_futures_user_socket(callback=handle_user_data)
    logging.info("üì° Binance User Data Stream –∑–∞–ø—É—â–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π.")

    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ listenKey (keep-alive) ‚Äì –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    def keep_alive():
        while True:
            time.sleep(30 * 60)
            try:
                binance_client.futures_stream_keepalive(listenKey=twm.listen_key)
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ keepalive: {e}")
    threading.Thread(target=keep_alive, daemon=True).start()

# --------------------------
# –í–µ–±—Ö—É–∫ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
@app.route("/webhook", methods=["POST"])
def webhook():
    data = request.get_json()
    logging.debug(f"DEBUG: –ü–æ–ª—É—á–µ–Ω JSON: {data}")
    if not data or "signal" not in data:
        logging.error("‚ùå –ù–µ—Ç –ø–æ–ª—è 'signal' –≤ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        return {"status": "error", "message": "No signal provided"}, 400

    signal = data["signal"].lower()
    symbol_received = data.get("symbol", "N/A")
    symbol_fixed = symbol_received.split('.')[0]

    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: leverage –∏ quantity (–µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    leverage = int(data.get("leverage", 20))
    quantity = float(data.get("quantity", 0.011))

    logging.info(f"üì• –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª: {signal}")
    logging.info(f"üì• –°–∏–º–≤–æ–ª: {symbol_received} -> {symbol_fixed}")
    logging.info(f"üì• Leverage: {leverage}, Quantity: {quantity}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ —ç—Ç–æ–º—É —Å–∏–º–≤–æ–ª—É
    pos = get_position(symbol_fixed)
    if pos and abs(float(pos.get("positionAmt", 0))) > 0:
        logging.info(f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞ –ø–æ {symbol_fixed}. –°–∏–≥–Ω–∞–ª {signal.upper()} –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.")
        send_telegram_message(f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞ –ø–æ {symbol_fixed}. –°–∏–≥–Ω–∞–ª {signal.upper()} –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.")
        return {"status": "skipped", "message": "Position already open."}

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ—á–æ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
    try:
        leverage_resp = binance_client.futures_change_leverage(symbol=symbol_fixed, leverage=leverage)
        logging.info(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–ª–µ—á–æ {leverage} –¥–ª—è {symbol_fixed}: {leverage_resp}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–µ—á–∞ –¥–ª—è {symbol_fixed}: {e}")
        return {"status": "error", "message": f"Error setting leverage: {e}"}

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ notional
    ticker = binance_client.futures_symbol_ticker(symbol=symbol_fixed)
    last_price = float(ticker["price"])
    min_notional = 20.0  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π notional (USDT)
    min_qty_required = min_notional / last_price
    if quantity < min_qty_required:
        logging.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ {quantity} —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ, –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ç—Ä–µ–±—É–µ–º–æ–µ: {min_qty_required:.6f}. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")
        quantity = min_qty_required

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ—Ä–æ–Ω—É —Å–¥–µ–ª–∫–∏: –µ—Å–ª–∏ —Å–∏–≥–Ω–∞–ª "long" ‚Äì –æ—Ä–¥–µ—Ä BUY, –∏–Ω–∞—á–µ SELL
    side = "BUY" if signal == "long" else "SELL"

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä
    try:
        order = binance_client.futures_create_order(
            symbol=symbol_fixed,
            side=side,
            type="MARKET",
            quantity=quantity
        )
        logging.info(f"‚úÖ –û—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω: {order}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –¥–ª—è {symbol_fixed}: {e}")
        return {"status": "error", "message": f"Error creating order: {e}"}

    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∑–∏—Ü–∏–∏
    time.sleep(0.5)
    pos = get_position(symbol_fixed)
    if not pos:
        logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å–ª–µ –æ—Ä–¥–µ—Ä–∞")
        return {"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏–∏"}

    try:
        entry_price = float(pos.get("entryPrice", 0))
        used_margin = float(pos.get("initialMargin", 0))
        liq_price = float(pos.get("liquidationPrice", 0))
        break_even_price = float(pos.get("breakEvenPrice", 0))
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–∏: {e}")
        entry_price, used_margin, liq_price, break_even_price = 0, 0, 0, 0

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é –ø–æ –æ—Ä–¥–µ—Ä—É –≤—Ö–æ–¥–∞ (–∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç—Ä–µ–π–¥ —Å —Å–æ–≤–ø–∞–¥–∞—é—â–∏–º orderId)
    commission_entry = 0.0
    try:
        trades = binance_client.futures_account_trades(symbol=symbol_fixed)
        for trade in reversed(trades):
            if trade.get("orderId") == order.get("orderId"):
                commission_entry = float(trade.get("commission", 0))
                break
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–∏: {e}")

    open_message = (
        f"üöÄ –°–¥–µ–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞!\n"
        f"–°–∏–º–≤–æ–ª: {symbol_fixed}\n"
        f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {signal.upper()}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n"
        f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {entry_price}\n"
        f"–ü–ª–µ—á–æ: {leverage}\n"
        f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –º–∞—Ä–∂–∞: {used_margin}\n"
        f"–¶–µ–Ω–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏: {liq_price}\n"
        f"–ö–æ–º–∏—Å—Å–∏—è –≤—Ö–æ–¥–∞: {commission_entry}\n"
        f"–¶–µ–Ω–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏: {break_even_price}"
    )
    send_telegram_message(open_message)
    logging.info("DEBUG: Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:")
    logging.info(open_message)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
    positions_entry_data[symbol_fixed] = {
        "entry_price": entry_price,
        "quantity": quantity,
        "leverage": leverage,
        "commission_entry": commission_entry,
        "break_even_price": break_even_price
    }

    return {"status": "ok", "signal": signal, "symbol": symbol_fixed}

if __name__ == "__main__":
    threading.Thread(target=start_userdata_stream, daemon=True).start()
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
